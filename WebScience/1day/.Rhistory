points(theta, loglik(theta,x), col = "red")
theta = 0.5
count = 1
loglik.values = numeric(8)
while(count <= 8){
loglik.values[count] = loglik(theta,x)
theta = theta + 0.5
count = count + 1
}
loglik.values
x.points = seq(0.5,4,by=0.5)
plot(x.points,loglik.values, xlab = "Theta", ylab = "Log-Likelihood", type = "p", pch =16)
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-old.theta) < 1e-10){
break
}
}
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-10){
break
}
}
theta
optimize(loglik,c(0.5,4), maximum=TRUE)
optimize(loglik(theta,x),c(0.5,4), maximum=TRUE)
optimize(loglik,c(0.5,4), maximum=TRUE)
optimize(loglik,c(0.5,4),x, maximum=TRUE)
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-20){
break
}
}
theta
theta = 4
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-10){
break
}
}
theta
optimize(loglik,c(0.5,4),x, maximum=TRUE)
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
loglik = function(theta, x){
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
theta.hat
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
optimize(loglik,c(0.5,4),x, maximum=TRUE)
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
theta.hat
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(funct,x,theta){
loglik(theta,x) = funct
}
uniroot(f,c(-200,200))
uniroot(f,c(-200,200))
funct
uniroot(f,c(-100,100))
f = function(theta,funct,x){
loglik(theta,x) - funct
}
uniroot(f,c(-100,100),x,funct)
uniroot(f,c(-100,100),1,x,funct)
uniroot(f,c(-100,100),x,funct)
f = function(x,theta){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
f(x,4)
uniroot(f,c(-1000,1000))
f = function(x){
f = function(x){
2x - 2
}
f = function(x){
2x - 2
}
f = function(x){
2*x - 2
}
uniroot(f,c(-1000,1000))
f = function(x,theta){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
f = function(x){
2*x - 2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
uniroot(f,c(-1000,1000),x)
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
kill
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
##if(theta <= 0){
##stop("Theta must be greater than 0")
##}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
first = length(x)*log(theta)
}
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
loglik.d = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/theta
second = sum(log(x))
third = sum(((x^theta)*log(x)))
return(first + second - third)
}
loglik.dd = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/(theta^2)
second = sum(((x^theta)*(log(x)^2)))
return(-first-second)
}
#--------------QUESTION 4B------------------
theta = 0.5
count = 1
loglik.values = numeric(8)
while(count <= 8){
loglik.values[count] = loglik(theta,x)
theta = theta + 0.5
count = count + 1
}
plot(x.points,loglik.values, xlab = "Theta", ylab = "Log-Likelihood", type = "p", pch =16)
x.points = seq(0.5,4,by=0.5)
#--------------QUESTION 4C--------------------
theta = 2
loglik.values
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-10){
break
}
}
#------------QUESTION 4D------------------------
optimize(loglik,c(0.5,4),x, maximum=TRUE)
#------------QUESTION 4E-----------------------
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
optimize(loglik,c(0.5,4),x, maximum=TRUE)
optimize(loglik,interval = c(0.5,4),x, maximum=TRUE)
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
optimize(loglik,interval = c(0.5,4),x, maximum=TRUE)
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
#if(theta <= 0){
#stop("Theta must be greater than 0")
#}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
uniroot(f,c(-1000,1000),x)
uniroot(f,c(0,1000),x)
uniroot(f,c(0.1,1000),x)
uniroot(f,c(-1,1000),x)
load(url("http://www.stats.gla.ac.uk/~levers/teaching/s3i2r/a4.RData"))
#--------------QUESTION 1A-------------------
data = c(0.1,0,0.2,0.1,0.2,0,0.1,0,0.1,0.1,0,0.1)
rownames(joint.pmf) = c("Y=1","Y=2","Y=3")
joint.pmf = matrix(data, ncol= 4, nrow = 3)
colnames(joint.pmf) = c("X=1","X=2","X=3","X=4")
#--------------QUESTION 1B ALPHA---------
marg.y = apply(joint.pmf, 1, sum)
#--------------QUESTION 1B BETA-----------
marg.x = apply(joint.pmf,2,sum)
#--------------QUESTION 1B GAMMA----------
apply(joint.pmf, 2, function(x) x/marg.y)
#--------------QUESTION 1B DELTA---------
apply(joint.pmf, 1, function(x) x/marg.x)
#--------------QUESTION 2A--------------
mu.hat = sum(bicycle)/(nrow(bicycle)*ncol(bicycle))
alpha = apply(bicycle, 1, function(x) sum(x - mu.hat))/ncol(bicycle)
beta = apply(bicycle, 2, function(x) sum(x - mu.hat))/nrow(bicycle)
#------------QUESTION 2B---------------
func = bicycle - mu.hat - alpha - beta
residuals = bicycle - mu.hat
residuals = sweep(residuals,1, alpha, "-")
residuals = sweep(residuals,2, beta, "-")
RSS = sum(sweep(residuals,1,2,"^"))
#-----------QUESTION 2C------------------
SSalpha = ncol(bicycle)*sum(alpha^2)
FAtop = SSalpha/(nrow(bicycle) - 1)
FAbottom = RSS/((nrow(bicycle) - 1) *(ncol(bicycle) - 1))
Falpha = FAtop/FAbottom
#-----------QUESTION 2D-----------------
SSbeta = nrow(bicycle)*sum(beta^2)
FBtop = SSbeta/(ncol(bicycle) - 1)
FBbottom = RSS/((nrow(bicycle) - 1) *(ncol(bicycle) - 1))
Fbeta = FBtop/FBbottom
#-----------QUESTION 2E---------------
bicycle.long = cbind(c(bicycle))
bicycle.long = cbind(c("Car","Car","SUV","SUV","Taxi","Taxi","Motorcycle","Motorcycle","Bus","Bus","LGV","LGV","HGV","HGV"),bicycle.long)
bicycle.long = cbind(c("Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig"), bicycle.long)
rownames(bicycle.long) = c(seq(1,14,length.out=14))
colnames(bicycle.long) = c("headgear","vehicle","distance")
bicycle.long = as.data.frame(bicycle.long)
anova(lm(distance~headgear+vehicle, data=bicycle.long)) #Produces Error
#-----------QUESTION 3A--------------
total.houses = sum(taxbands[,4:ncol(taxbands)])
#-----------QUESTION 3B---------------
bands = taxbands[,4:ncol(taxbands)]
bands = apply(bands,2,sum)
#-----------QUESTION 3C---------------
IGplusbands = taxbands[,c(2,4:ncol(taxbands))]
IGplusbands$BandTotal = apply(IGplusbands[2:ncol(IGplusbands)],1,sum)
IGbandprop = IGplusbands[,-ncol(IGplusbands)]
IGbandprop = sweep(IGbandprop[,2:ncol(IGbandprop)], 1, IGplusbands$BandTotal, "/")
IGbandprop = cbind(IGplusbands$IGName, IGbandprop)
#----------QUESTION 3D---------------
number = order(IGbandprop$BandA)[length(IGbandprop$BandA)]
highestBandAprop = IGbandprop$`IGplusbands$IGName`[number]
number = order(IGbandprop$BandH)[length(IGbandprop$BandH)]
highestBandHprop = IGbandprop$`IGplusbands$IGName`[number]
#----------QUESTION 3E----------------
number = order(IGbandprop$BandA)[(length(IGbandprop$BandA) - 9):(length(IGbandprop$BandA))]
tenhighestBandAprop = IGbandprop$`IGplusbands$IGName`[number]
tenhighestBandAprop = rev(tenhighestBandAprop)
number = order(IGbandprop$BandH)[(length(IGbandprop$BandH) - 9):(length(IGbandprop$BandH))]
tenhighestBandHprop = IGbandprop$`IGplusbands$IGName`[number]
tenhighestBandHprop = rev(tenhighestBandHprop)
#---------QUESTION 3F----------------
bandsLA = taxbands[3:ncol(taxbands)]
la.num = by(bandsLA[2:9], bandsLA$LA, function(x) apply(x,2,sum))
#---------QUESTION 3G------------------
total.LA = apply(bandsLA[2:9], 2, sum)
bandsLA[2:9] = sweep(bandsLA[2:9], 2, total.LA, "/")
la.num.prop = by(bandsLA[2:9], bandsLA$LA, function(x) apply(x,2,sum))
list1 = numeric(length(la.num.prop))
for(i in 1:length(la.num.prop)){
a = la.num.prop[[i]]
list1[i] = a[1]
}
for(i in 1:length(list1)){
if(list1[i] == max(list1)){
pos = i
break
}
}
highestA = la.num.prop[16]
highestA
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
loglik.d = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/theta
second = sum(log(x))
third = sum(((x^theta)*log(x)))
return(first + second - third)
}
loglik.dd = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/(theta^2)
second = sum(((x^theta)*(log(x)^2)))
return(0-first-second)
}
#--------------QUESTION 4B------------------
theta = 0.5
count = 1
loglik.values = numeric(8)
while(count <= 8){
loglik.values[count] = loglik(theta,x)
theta = theta + 0.5
count = count + 1
}
x.points = seq(0.5,4,by=0.5)
plot(x.points,loglik.values, xlab = "Theta", ylab = "Log-Likelihood", type = "p", pch =16)
#--------------QUESTION 4C--------------------
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-10){
break
}
}
#------------QUESTION 4D------------------------
optimize(loglik,interval = c(0.5,4),x, maximum=TRUE)
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1,1000),x)
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return sum(sum.part)
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return sum(sum.part)
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
sum(sum.part)
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
total = sum(sum.part)
return total
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
par = (0.5,1,1,1,1)
par = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik,control=list(fnscale=-1), x = mixture.data, par = par)
result = optim(c(0,0), gmm.loglik(par),control=list(fnscale=-1), x = mixture.data)
result = optim(c(0,0), gmm.loglik(par,x=mixture.data),control=list(fnscale=-1))
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik(par,x=mixture.data),control=list(fnscale=-1))
gmm.loglik(par,mixture.data)
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par1 = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik(par1,mixture.data),control=list(fnscale=-1))
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par1 = c(0.5,1,1,1,1)
result = optim(c(0,0), fn = gmm.loglik(par1,mixture.data),control=list(fnscale=-1))
for(i in 1:100){
w = (par[1]*dnorm(x,par[2],par[3]))/((par[1]*dnorm(x,par[2],par[3]))+((1-p)*dnorm(x,par[4],par[5])))
par[1] = sum(w)/length(w)
par[2] = sum(w*x)/sum(w)
par[4] = sum((1-w)*x)/(n-sum(w))
par[3] = sum(w*(x-par[2])^2)/sum(w)
par[5] = sum((1-w)*((x-par[4])^2))/(n-sum(w))
}
w
par = c(0.5,1,1,1,1)
x = mixture.data
for(i in 1:100){
w = (par[1]*dnorm(x,par[2],par[3]))/((par[1]*dnorm(x,par[2],par[3]))+((1-p)*dnorm(x,par[4],par[5])))
par[1] = sum(w)/length(w)
par[2] = sum(w*x)/sum(w)
par[4] = sum((1-w)*x)/(n-sum(w))
par[3] = sum(w*(x-par[2])^2)/sum(w)
par[5] = sum((1-w)*((x-par[4])^2))/(n-sum(w))
}
w
rm(list = ls())
setwd("C:/Users/Chris/code/ComSci4thYear/WebScience/1day")
args = NULL
args[1] = "clusters.sortedby.clusterid.csv"
data= read.csv(args[1],header = FALSE)
View(data)
colnames(data) = c("cluster_ID","cluster_name_entity","tweet_id","timestamp_ms","user_id","tweet_tokens","tweet_text")
cluster.freq = table(data$cluster_id)
cluster.freq
cluster.freq = table(data$cluster_ID)
cluster.freq
cluster.freq[1]
nrow(subset(data,data$cluster_ID == 1))
summary(cluster.freq)
quantile(cluster.freq)
max(cluster.freq)
nrow(cluster.freq)
cluster.freq = as.data.frame(cluster.freq)
View(cluster.freq)
mean(cluster.freq)
mean(cluster.freq$Freq)
args = NULL
args[1] = "clusters.sortedby.clusterid.csv"
data= read.csv(args[1],header = FALSE)
View(data)
