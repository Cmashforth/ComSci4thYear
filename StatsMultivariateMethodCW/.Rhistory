funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
#if(theta <= 0){
#stop("Theta must be greater than 0")
#}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1000,1000),x)
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
uniroot(f,c(-1000,1000),x)
uniroot(f,c(0,1000),x)
uniroot(f,c(0.1,1000),x)
uniroot(f,c(-1,1000),x)
load(url("http://www.stats.gla.ac.uk/~levers/teaching/s3i2r/a4.RData"))
#--------------QUESTION 1A-------------------
data = c(0.1,0,0.2,0.1,0.2,0,0.1,0,0.1,0.1,0,0.1)
rownames(joint.pmf) = c("Y=1","Y=2","Y=3")
joint.pmf = matrix(data, ncol= 4, nrow = 3)
colnames(joint.pmf) = c("X=1","X=2","X=3","X=4")
#--------------QUESTION 1B ALPHA---------
marg.y = apply(joint.pmf, 1, sum)
#--------------QUESTION 1B BETA-----------
marg.x = apply(joint.pmf,2,sum)
#--------------QUESTION 1B GAMMA----------
apply(joint.pmf, 2, function(x) x/marg.y)
#--------------QUESTION 1B DELTA---------
apply(joint.pmf, 1, function(x) x/marg.x)
#--------------QUESTION 2A--------------
mu.hat = sum(bicycle)/(nrow(bicycle)*ncol(bicycle))
alpha = apply(bicycle, 1, function(x) sum(x - mu.hat))/ncol(bicycle)
beta = apply(bicycle, 2, function(x) sum(x - mu.hat))/nrow(bicycle)
#------------QUESTION 2B---------------
func = bicycle - mu.hat - alpha - beta
residuals = bicycle - mu.hat
residuals = sweep(residuals,1, alpha, "-")
residuals = sweep(residuals,2, beta, "-")
RSS = sum(sweep(residuals,1,2,"^"))
#-----------QUESTION 2C------------------
SSalpha = ncol(bicycle)*sum(alpha^2)
FAtop = SSalpha/(nrow(bicycle) - 1)
FAbottom = RSS/((nrow(bicycle) - 1) *(ncol(bicycle) - 1))
Falpha = FAtop/FAbottom
#-----------QUESTION 2D-----------------
SSbeta = nrow(bicycle)*sum(beta^2)
FBtop = SSbeta/(ncol(bicycle) - 1)
FBbottom = RSS/((nrow(bicycle) - 1) *(ncol(bicycle) - 1))
Fbeta = FBtop/FBbottom
#-----------QUESTION 2E---------------
bicycle.long = cbind(c(bicycle))
bicycle.long = cbind(c("Car","Car","SUV","SUV","Taxi","Taxi","Motorcycle","Motorcycle","Bus","Bus","LGV","LGV","HGV","HGV"),bicycle.long)
bicycle.long = cbind(c("Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig","Helmet","Wig"), bicycle.long)
rownames(bicycle.long) = c(seq(1,14,length.out=14))
colnames(bicycle.long) = c("headgear","vehicle","distance")
bicycle.long = as.data.frame(bicycle.long)
anova(lm(distance~headgear+vehicle, data=bicycle.long)) #Produces Error
#-----------QUESTION 3A--------------
total.houses = sum(taxbands[,4:ncol(taxbands)])
#-----------QUESTION 3B---------------
bands = taxbands[,4:ncol(taxbands)]
bands = apply(bands,2,sum)
#-----------QUESTION 3C---------------
IGplusbands = taxbands[,c(2,4:ncol(taxbands))]
IGplusbands$BandTotal = apply(IGplusbands[2:ncol(IGplusbands)],1,sum)
IGbandprop = IGplusbands[,-ncol(IGplusbands)]
IGbandprop = sweep(IGbandprop[,2:ncol(IGbandprop)], 1, IGplusbands$BandTotal, "/")
IGbandprop = cbind(IGplusbands$IGName, IGbandprop)
#----------QUESTION 3D---------------
number = order(IGbandprop$BandA)[length(IGbandprop$BandA)]
highestBandAprop = IGbandprop$`IGplusbands$IGName`[number]
number = order(IGbandprop$BandH)[length(IGbandprop$BandH)]
highestBandHprop = IGbandprop$`IGplusbands$IGName`[number]
#----------QUESTION 3E----------------
number = order(IGbandprop$BandA)[(length(IGbandprop$BandA) - 9):(length(IGbandprop$BandA))]
tenhighestBandAprop = IGbandprop$`IGplusbands$IGName`[number]
tenhighestBandAprop = rev(tenhighestBandAprop)
number = order(IGbandprop$BandH)[(length(IGbandprop$BandH) - 9):(length(IGbandprop$BandH))]
tenhighestBandHprop = IGbandprop$`IGplusbands$IGName`[number]
tenhighestBandHprop = rev(tenhighestBandHprop)
#---------QUESTION 3F----------------
bandsLA = taxbands[3:ncol(taxbands)]
la.num = by(bandsLA[2:9], bandsLA$LA, function(x) apply(x,2,sum))
#---------QUESTION 3G------------------
total.LA = apply(bandsLA[2:9], 2, sum)
bandsLA[2:9] = sweep(bandsLA[2:9], 2, total.LA, "/")
la.num.prop = by(bandsLA[2:9], bandsLA$LA, function(x) apply(x,2,sum))
list1 = numeric(length(la.num.prop))
for(i in 1:length(la.num.prop)){
a = la.num.prop[[i]]
list1[i] = a[1]
}
for(i in 1:length(list1)){
if(list1[i] == max(list1)){
pos = i
break
}
}
highestA = la.num.prop[16]
highestA
loglik = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)*log(theta)
second = (theta - 1)*(sum(log(x)))
third = sum((x^theta))
return(first + second - third)
}
loglik.d = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/theta
second = sum(log(x))
third = sum(((x^theta)*log(x)))
return(first + second - third)
}
loglik.dd = function(theta, x){
if(theta <= 0){
stop("Theta must be greater than 0")
}
first = length(x)/(theta^2)
second = sum(((x^theta)*(log(x)^2)))
return(0-first-second)
}
#--------------QUESTION 4B------------------
theta = 0.5
count = 1
loglik.values = numeric(8)
while(count <= 8){
loglik.values[count] = loglik(theta,x)
theta = theta + 0.5
count = count + 1
}
x.points = seq(0.5,4,by=0.5)
plot(x.points,loglik.values, xlab = "Theta", ylab = "Log-Likelihood", type = "p", pch =16)
#--------------QUESTION 4C--------------------
theta = 2
for(i in 1:100){
prev.theta = theta
theta = theta - ((loglik.d(theta,x))/(loglik.dd(theta,x)))
if(abs(theta-prev.theta) < 1e-10){
break
}
}
#------------QUESTION 4D------------------------
optimize(loglik,interval = c(0.5,4),x, maximum=TRUE)
theta.hat = optimize(loglik,c(0.5,4),x, maximum=TRUE)$maximum
funct = (2*loglik(theta.hat,x)-qchisq(.95,1))/2
f = function(theta,x){
2*loglik(theta,x) - 2*loglik(theta.hat,x) + qchisq(.95,1)
}
uniroot(f,c(-1,1000),x)
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return sum(sum.part)
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return sum(sum.part)
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
sum(sum.part)
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
total = sum(sum.part)
return total
}
gmm.loglik = function(par,x){
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
par = (0.5,1,1,1,1)
par = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik,control=list(fnscale=-1), x = mixture.data, par = par)
result = optim(c(0,0), gmm.loglik(par),control=list(fnscale=-1), x = mixture.data)
result = optim(c(0,0), gmm.loglik(par,x=mixture.data),control=list(fnscale=-1))
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik(par,x=mixture.data),control=list(fnscale=-1))
gmm.loglik(par,mixture.data)
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par1 = c(0.5,1,1,1,1)
result = optim(c(0,0), gmm.loglik(par1,mixture.data),control=list(fnscale=-1))
gmm.loglik = function(par,x){
if(length(par) != 5){
stop("Par must be of length five")
}
if(par[1] >= 1 || par[2] <= 0){
stop("p must be between 0 and 1")
}
first = par[1]*dnorm(x,par[2],par[3])
second = (1-par[1])*dnorm(x,par[4],par[5])
sum.part = log((first+second))
return(sum(sum.part))
}
#-----------QUESTION 5B----------------
par1 = c(0.5,1,1,1,1)
result = optim(c(0,0), fn = gmm.loglik(par1,mixture.data),control=list(fnscale=-1))
for(i in 1:100){
w = (par[1]*dnorm(x,par[2],par[3]))/((par[1]*dnorm(x,par[2],par[3]))+((1-p)*dnorm(x,par[4],par[5])))
par[1] = sum(w)/length(w)
par[2] = sum(w*x)/sum(w)
par[4] = sum((1-w)*x)/(n-sum(w))
par[3] = sum(w*(x-par[2])^2)/sum(w)
par[5] = sum((1-w)*((x-par[4])^2))/(n-sum(w))
}
w
par = c(0.5,1,1,1,1)
x = mixture.data
for(i in 1:100){
w = (par[1]*dnorm(x,par[2],par[3]))/((par[1]*dnorm(x,par[2],par[3]))+((1-p)*dnorm(x,par[4],par[5])))
par[1] = sum(w)/length(w)
par[2] = sum(w*x)/sum(w)
par[4] = sum((1-w)*x)/(n-sum(w))
par[3] = sum(w*(x-par[2])^2)/sum(w)
par[5] = sum((1-w)*((x-par[4])^2))/(n-sum(w))
}
w
day = c(25,40,30,55)
mean(day)
sd(day)
37.5+(3*13.22876)
day = c(40,30,55)
mean(day)
sd(day)
41.6666666666777777+(3*12.58306)
day= c(22,5,14,109)
mean(day)
sd(day)
day = c(1,1,1,205)
mean(day)
sd(day)
day = c(1,1,1,900)
mean(day)
sd(day)
day = c(900)
mean(day)
sd(day)
rm(list=ls())
load("C:/Users/Chris/code/ComSci4thYear/StatsMultivariateMethodCW/MM2017Project.RData")
data = HTRU.1
#######Split the Data into Test,Train and Validation##################
labels = data$Class
data = data[,-9]
n = nrow(data)
ind1 = sample(c(1:n),round(n/2))
ind2 = sample(c(1:n)[-ind1], round(n/4))
ind3 = setdiff(c(1:n), c(ind1,ind2))
train.data  = data[ind1,]
train.label = labels[ind1]
valid.data = data[ind2,]
valid.label = labels[ind2]
test.data = data[ind3,]
test.label = labels[ind3]
save(train.data,train.label,valid.data,valid.label,test.data,test.label, file = "data.txt")
########Data is saved, must be read in from now on##################
######Regression########
res.lm = lm(train.label~.,data=train.data)
pred.train = ifelse(res.lm$fitted.values <= 0.5,0,1)
table(train.label,pred.train)
correct.class.train = sum(diag(table(train.label,pred.train)))/nrow(train.data)
res.valid = merge(valid.data,test.data, all = TRUE)
res.labels = c(valid.label,test.label)
n.valid = nrow(res.valid)
yhat.valid = cbind(rep(1,n.valid),data.matrix(res.valid)) %*% res.lm$coefficients
yhat.valid = predict(res.lm,res.valid)
pres.valid = ifelse(yhat.valid<= 0.5,0,1)
table(res.labels,pres.valid)
correct.class.valid = sum(diag(table(res.labels,pres.valid)))/nrow(res.valid)
######Knn############
library(class)
corr.class.rate = rep(NA,20)
for(k in 1:20){
pred = knn(train.data,valid.data,train.label,k=k)
corr.class.rate[k] = sum(pred == valid.label)/nrow(valid.data)
}
plot(1:20,corr.class.rate, type = "l", xlab = "k")
max(corr.class.rate)
best.k = which.max(corr.class.rate)
pred = knn(train.data,test.data,train.label, k = best.k)
sum(pred == test.label)/nrow(test.data)
fit.cva = lda(train.data,train.label, prior = rep(1/2,2))
library(MASS)
fit.cva = lda(train.data,train.label, prior = rep(1/2,2))
pred.cva = predict(fit.cva,valid.data)
pred.cva
plot(train.label,train.data,type = "n")
cva.train.data = cbind(train.data,train.label)
View(cva.train.data)
cva.grp1 = cva.train.data[cva.train.data$train.label == 0,-1]
View(cva.grp1)
cva.grp1 = cva.train.data[cva.train.data$train.label == 0,-9]
cva.grp2 = cva.train.data[cva.train.data$train.label == 1,-9]
n = dim(cva.train.data)
n = dim(cva.train.data)[1]
n1 = dim(cva.grp1)[1]
n2 = dim(cva.grp2)[1]
p = dim(cva.train.data)[2] - 1
mean.grp1 = apply(cva.grp1,2,mean)
mean.grp2 = apply(cva.grp1,2,mean)
mean.grp2 = apply(cva.grp2,2,mean)
mean.diff = mean.grp1 - mean.grp2
S.grp1 = var(cva.grp1)
S.grp2 = var(cva.grp2)
s.pooled = ((n1 - 1) * S.grp1 + (n2 - 1)* S.grp2)/(n1+n2 -2)
s.pooled.inv = solve(s.pooled)
a = s.pooled.inv%*%mean.diff
z = t(a) %*% t(valid.data)
boxplot(split(z,valid.label))
train.lda = lda(train.data,train.label,prior = c(0.5,0.5))
train.lda
plot(train.lda)
valid.lda = predict(train.lda,newdata = valid.data)
names(valid.lda)
xtab = table(valid.label,valid.lda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
test.lda = predict(train.lda,newdata = test.data)
xtab = table(test.label,test.lda$class)
1 - sum(diag(xtab))/sum(xtab)
train.lda = lda(train.data,train.label)
plot(train.lda)
valid.lda = predict(train.lda,valid.data)
xtab = table(valid.label,valid.lda$class)
xtab
valid.lda$posterior[valid.label != valid.lda$class,]
1 - sum(diag(xtab))/sum(xtab)
test.lda = predict(train.lda,test.data)
xtab = table(test.label,test.lda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
train.qda = qda(train.data,train.label)
valid.qda = predict(train.qda,valid.label)
valid.qda = predict(train.qda,valid.label)
valid.label
train.qda
train.qda = qda(train.label~train.data)
train.qda = qda(train.data,train.label)
valid.qda = predict(train.qda,valid.label)
valid.qda = predict(train.qda,valid.data)
xtab = table(valid.label,valid.qda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
test.qda = predict(train.qda,test.data)
xtab = table(test.label,test.qda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
set.seed(126)
?set.seed
library(rpart)
train.tree = cbind(train.label,train.data)
View(train.tree)
train.rp = rpart(train.label~., data = train.tree, method = class)
train.rp = rpart(train.tree$train.label~., data = train.tree, method = class)
train.rp = rpart(train.label~., data = train.tree, method = "class")
train.rp
plot(train.rp)
text(train.rp)
plotcp(train.rp)
valid.tree = cbind(valid.label,valid.data)
valid.rp = predict(train.rp,valid.tree, method = "class")
xtab = table(valid.label,valid.rp)
xtab = table(valid.tree$valid.label,valid.rp)
valid.rp
xtab = table(valid.tree$valid.label,valid.rp$class)
names(valid.rp)
valid.rp = predict(train.rp,valid.tree, method = "class")
valid.rp
xtab = table(valid.tree$valid.label,valid.rp)
length(valid.label)
length(valid.rp)
nrow(valid.tree)
valid.rp = predict(train.rp,valid.tree, type = "class")
xtab = table(valid.label,valid.rp)
xtab
1 - sum(diag(xtab))/sum(xtab)
data.clus = data[,-9]
View(data.clus)
n = nrow(data.clus)
ss = rep(0,2)
ss[1] = (n-1)*sum(apply(data.clus,2,var))
ss[i] = sum(kmeans(data, centers =i, nstart=3))
rm(list=ls())
load("C:/Users/Chris/code/ComSci4thYear/StatsMultivariateMethodCW/MM2017Project.RData")
data = HTRU.1
pairs(data)
rm(list=ls())
load("C:/Users/Chris/code/ComSci4thYear/StatsMultivariateMethodCW/MM2017Project.RData")
load(file = "data.txt")
pred = knn(train.data,test.data,train.label,k=21)
library(class)
pred = knn(train.data,test.data,train.label,k=21)
plot(pred)
sum(pred==test.label)/nrow(test.data)
1- sum(pred==test.label)/nrow(test.data)
pred.best = knn(train.data,valid.data,train.label,k=21)
table(pred.best, valid.label)
corr.class.rate
load(file = "data.txt")
res.lm = lm(train.label~.,data=train.data)
pred.class = predict(res.lm, valid.data)
pred.class = ifelse(pred.class >= 0.5, pred.class <- 1, pred.class <- 0)
corr.class.rate = sum(valid.label == pred.class)/nrow(valid.data)
table(pred.class, valid.label)
library(MASS)
train.lda = lda(train.data,train.label,prior = rep(0.5,2))
train.lda
plot(train.lda)
valid.lda = predict(train.lda,newdata = valid.data)
names(valid.lda)
valid.lda
xtab = table(valid.label,valid.lda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
rm(list=ls())
setwd("C:/Users/Chris/code/ComSci4thYear/StatsMultivariateMethodCW")
load(file = "data.txt")
pred.best = knn(train.data,valid.data,train.label,k=21)
table(pred.best, valid.label)
corr.class.rate
pred = knn(train.data,test.data,train.label,k=21)
1- sum(pred==test.label)/nrow(test.data)
valid.lda = predict(train.lda,newdata = test.data)
train.lda = lda(train.data,train.label,prior = rep(0.5,2))
valid.lda = predict(train.lda,newdata = test.data)
xtab = table(test.label,valid.lda$class)
1 - sum(diag(xtab))/sum(xtab)
pred
pred = knn(train.data,test.data,train.label,k=21)
xtab = table(test.label,pred$class)
table(pred,test.label)
tab = table(pred,test.label)
1 - sum(diag(tab))/sum(tab)
valid.lda = predict(train.lda,newdata = test.data)
xtab = table(test.label,valid.lda$class)
xtab
1 - sum(diag(xtab))/sum(xtab)
summary(data)
load("C:/Users/Chris/code/ComSci4thYear/StatsMultivariateMethodCW/MM2017Project.RData")
data = HTRU.1
summary(data)
summary(data$Class)
pairs(data)
nrow(data$Class == 1)
length(data$Class == 1)
nrow(data$Class == 0)
View(data)
nrow(data$Class == "0")
nrow(data[data$Class == 1])
nrow(labels == 1)
labels
labels = data$Class
labels[labels == 1]
nrow(labels[labels == 1])
nrow(labels[labels == 0])
labels[labels == 0]
l = labels[labels == 0]
